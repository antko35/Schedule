local cjson = require "cjson"
local jwt = require "resty.jwt"
local http = require "resty.http"

-- üîπ –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∑–∞–ø—Ä–æ—Å–∞
local request_uri = ngx.var.uri

-- üîπ –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Authorization
local auth_header = ngx.var.http_authorization
if not auth_header then
    ngx.exit(ngx.HTTP_UNAUTHORIZED)
end
local token = auth_header:sub(8) -- –£–±–∏—Ä–∞–µ–º "Bearer "

-- üîπ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —É —Å–µ—Ä–≤–∏—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
local function get_permissions_from_auth_service()
    local httpc = http.new()
    local res, err = httpc:request_uri("https://localhost/api/User/getPermissions", {
        method = "GET",
        headers = {
            ["Authorization"] = "Bearer " .. token
        }
    })

    if not res or res.status ~= 200 then
        ngx.log(ngx.ERR, "Error auth-service: ", err or res.status)
        return nil
    end

    return cjson.decode(res.body)
end

local user_permissions = get_permissions_from_auth_service()
if not user_permissions then
    ngx.exit(ngx.HTTP_FORBIDDEN)
end

-- –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —ç—Ç–æ—Ç –º–∞—Ä—à—Ä—É—Ç
local has_permission = false
for _, perm in ipairs(user_permissions) do
    if perm == request_uri then
        has_permission = true
        break
    end
end

if not has_permission then
    ngx.exit(ngx.HTTP_FORBIDDEN)
end
