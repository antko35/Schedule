events {
    worker_connections 1024;
}

http {
    upstream user_service {
        server user-service:8080;
    }

    upstream schedule_service {
        server schedule-service:8080;
    }

    upstream user_management_service {
        server user-management-service:8080;
    }

    map $user_permissions $has_manage_users_permission {
        default 0;
        ~*\bmanage_users\b 1;
    }
    server {
        listen 80;

        location = /auth_check {
            #internal;
            proxy_pass https://user_service/User/getPermissions;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            proxy_set_header Cookie $http_cookie;
            proxy_set_header Authorization $http_authorization;
            
            proxy_pass_request_body off;
            proxy_set_header Content-Length "";
            
            add_header Debug-Permissions $upstream_http_x_user_permissions;
        }

        location /user/ {
            proxy_pass https://user_service/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            proxy_set_header Cookie $http_cookie;
        }

        location /schedule/ {
            proxy_pass http://schedule_service/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /user-management/ {
            # Проверка авторизации
            auth_request /auth_check;
            auth_request_set $auth_status $upstream_status;
            auth_request_set $user_permissions $upstream_http_x_user_permissions;

            add_header Auth-status $auth_status;
            add_header X-User-Permissions "$user_permissions";
            
            # Обработка ошибок авторизации
            error_page 401 = @unauthorized;
            error_page 403 = @forbidden;

            # Проверка разрешений
             # if ($has_manage_users_permission = 0) {
              #      return 403;
              #}

            proxy_pass http://user_management_service/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location @unauthorized {
            return 401 "Unauthorized";
        }

        location @forbidden {
            return 403 "Forbidden";
        }

        location / {
            root /usr/share/nginx/html;
            index index.html index.htm;
        }
    }
}