events {}

http {
    upstream user_service {
        server user-service:8080;
    }

    upstream schedule_service {
        server schedule-service:8080;
    }

    upstream user_management_service {
        server user-management-service:8080;
    }

    server {
        listen 80;

        # Блок для проверки авторизации
        location = /auth_check {
            internal;  # Запросы только изнутри Nginx
            proxy_pass http://user_service/User/getPermissions;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Authorization $http_authorization;
            proxy_pass_request_body off;  # Не передаем тело запроса
            proxy_set_header Content-Length "";
        }

        location /user/ {
            proxy_pass https://user_service/;  # Исправлено на http
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /schedule/ {
            proxy_pass http://schedule_service/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /user-management/ {
            # Проверка авторизации
            auth_request /auth_check;
            auth_request_set $auth_status $upstream_status;
            auth_request_set $user_permissions $upstream_http_x_user_permissions;

            # Обработка ошибок авторизации
            error_page 401 = @unauthorized;
            error_page 403 = @forbidden;

            # Проверка разрешений
            if ($user_permissions !~* "manage_users") {
                return 403;
            }

            proxy_pass http://user_management_service/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location @unauthorized {
            return 401 "Unauthorized";
        }

        location @forbidden {
            return 403 "Forbidden";
        }

        location / {
            root /usr/share/nginx/html;
            index index.html index.htm;
        }
    }
}